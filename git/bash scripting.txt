#!/bin/bash   #instructs the bash cl to run bash commands
---> to run the script:
 ./file_name.sh in the bash cl
--->Variables:
greeting="Hello"
--->to access the variables:
echo $greeting

--->Conditionals
if [ $index -lt 5 ]
then
  echo $index
else
  echo 5
fi
--->Operators
Equal: -eq
Not equal: -ne
Less than or equal: -le
Less than: -lt
Greater than or equal: -ge
Greater than: -gt
Is null: -z

The common operators for comparing strings are:

Equal: ==
Not equal: !=

--->Loops
There are 3 different ways to loop within a bash script:
for, while and until.
--->The for loop
for word in $paragraph
do
  echo $word
done

--->While
while [ $index -lt 5 ]
do
  echo $index
  index=$((index + 1))
done

The same loop could also be written as an until loop as follows:
until [ $index -eq 5 ]
do
  echo $index
  index=$((index + 1))
done

--->Inputs
To ask the user for input and save it to the number variable, we 
would use the following code:

echo "Guess a number"
read number
echo "You guessed $number"

--->Another way to access external data is to have the user add 
input arguments when they run your script.
saycolors red green blue

If your script needs to accept an indefinite number of input 
arguments, you can iterate over them using the "$@" syntax

for color in "$@"
do
  echo $color
done
--->You can assign a set of files to a variable name using 
standard bash pattern matching using regular expressions
eg files=/some/directory/*
You can then iterate through each file and do something
for file in $files
do
  echo $file
done

--->Aliases
You can set up aliases for your bash scripts within your 
.bashrc or .bash_profile file to allow calling your scripts 
without the full filename.
alias saycolors='./saycolors.sh'
--->You can even add standard input arguments to your alias. 
For example, if we always want “green” to be included as the 
first input to saycolors, we could modify our alias to:
alias saycolors='./saycolors.sh "green"'



