---> ES8 provides a new syntax for handling our asynchronous action, 
async...await.
The async...await syntax allows us to write asynchronous code that
reads similarly to traditional synchronous, imperative programs.
--->The async Keyword
The async keyword is used to write functions that handle asynchron
ous actions. We wrap our asynchronous logic inside a function 
prepended with the async keyword. Then, we invoke that function.

async function myFunc() {
  // Function body here
};

myFunc();

or
const myFunc = async () => {
  // Function body here
};

myFunc();

async functions always return a promise.

async function fivePromise() { 
  return 5;
}

fivePromise()
.then(resolvedValue => {
    console.log(resolvedValue);
  })  // Prints 5


---> The wait operator
The await keyword can only be used inside an async function. await
 is an operator: it returns the resolved value of a promise.
In the example below, myPromise() is a function that returns a 
promise which will resolve to the string "I am resolved now!".

async function asyncFuncExample(){
  let resolvedValue = await myPromise();
  console.log(resolvedValue);
}

asyncFuncExample(); // Prints: I am resolved now!
Within our async function, asyncFuncExample(), we use await to 
halt our execution until myPromise() is resolved and assign its 
resolved value to the variable resolvedValue. Then we log resolved
Value to the console.

--->Writing async Functions
let myPromise = () => {
  return new Promise((resolve, reject) => {
    setTimeout(() => {
      resolve('Yay, I resolved!')
    }, 1000);
  });
}

Now we’ll write two async functions which invoke myPromise():
async function noAwait() {
 let value = myPromise();
 console.log(value);
}

async function yesAwait() {
 let value = await myPromise();
 console.log(value);
}

noAwait(); // Prints: Promise { <pending> }
yesAwait(); // Prints: Yay, I resolved!

--->Handling Dependent Promises
The true beauty of async...await is when we have a series of 
asynchronous actions which depend on one another.

--->With native promise syntax
function nativePromiseVersion() {
    returnsFirstPromise()
    .then((firstValue) => {
        console.log(firstValue);
        return returnsSecondPromise(firstValue);
    })
   .then((secondValue) => {
        console.log(secondValue);
    });
}

--->an async function to accomplish the same thing:
async function asyncAwaitVersion() {
 let firstValue = await returnsFirstPromise();
 console.log(firstValue);
 let secondValue = await returnsSecondPromise(firstValue);
 console.log(secondValue);
}

--->Handling Errors
With async...await, we use try...catch statements for error 
handling.
async function usingTryCatch() {
 try {
   let resolveValue = await asyncFunction('thing that will fail');
   let secondValue = await secondAsyncFunction(resolveValue);
 } catch (err) {
   // Catches any errors in the try block
   console.log(err);
 }
}

usingTryCatch();

--->we can still use native promise’s .catch() with an async 
function

async function usingPromiseCatch() {
   let resolveValue = await asyncFunction('thing that will fail');
}

let rejectedPromise = usingPromiseCatch();
rejectedPromise.catch((rejectValue) => {
console.log(rejectValue);
})

--->Handling Independent Promises
what if our async function contains multiple promises which are 
not dependent on the results of one another to execute?
async function waiting() {
 const firstValue = await firstAsyncThing();
 const secondValue = await secondAsyncThing();
 console.log(firstValue, secondValue);
}

async function concurrent() {
 const firstPromise = firstAsyncThing();
 const secondPromise = secondAsyncThing();
console.log(await firstPromise, await secondPromise);
}
Within our async functions we should still take advantage of 
concurrency, the ability to perform asynchronous actions at the 
same time.
e.g
async function serveDinner(){
  let vegetablePromise = steamBroccoli();
  let starchPromise = cookRice();
  let protienPromise = bakeChicken();
  let sidePromise = cookBeans();
  console.log(`Dinner is served. We're having ${ await vegetablePromise}, ${await starchPromise}, ${await protienPromise}, and ${await sidePromise}.`);
}
serveDinner();

--->Await Promise.all()
Another way to take advantage of concurrency when we have multiple
promises which can be executed simultaneously is to await a 
Promise.all().
We can pass an array of promises as the argument to Promise.all(),
 and it will return a single promise.

async function asyncPromAll() {
  const resultArray = await Promise.all([asyncTask1(), asyncTask2(), asyncTask3(), asyncTask4()]);
  for (let i = 0; i<resultArray.length; i++){
    console.log(resultArray[i]); 
  }
Promise.all() is a good choice if multiple asynchronous tasks are
 all required, but none must wait for any other before executing.

}