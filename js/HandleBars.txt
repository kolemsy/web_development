--->Handlebars, you are provided a templating engine which allows you 
to generate reusable HTML with JavaScript.

For instance, if we use the following script:
<script id="foo" type="text/x-handlebars-template">
  <p>{{bar}}</p>
</script>

And our JavaScript file looks like:
const source = document.getElementById('foo').innerHTML;
const template = Handlebars.compile(source);
const context = {
  bar: 'Text of the paragraph element'
};
const compiledHtml = template(context);

After running our code, the expression, {{bar}} is replaced with 
the value of context.bar in our JavaScript file. In other words, 
compiledHtml will contain a string of 
'<p> Text of the paragraph element </p>'

--->Handlebars "Each" and "This"
{{#each someArray}}
  <p>{{this}} is the current element!</p>
{{/each}}

This {{each}} block would be paired with an array like:

const context = {
  someArray: ['First', 'Second', 'Third'] 
}
After compiling, the HTML will look like:

<p>First is the current element!</p>
<p>Second is the current element!</p>
<p>Third is the current element!</p>

--->Combining "If" and "Each"
{{#each languages}}
      	<div class="card">
          {{#if this.modern}}
            <p>I should learn {{this.name}}.</p>
          {{else}}
            <p>When I have time, I'll learn {{this.name}}.</p>
          {{/if}}
        </div>
      {{/each}}