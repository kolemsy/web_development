JavaScript modules are reusable pieces of code that can be 
exported from one program and imported for use in another program.
Below is an example of how to define a module and how to export it using the statement module.exports.

In menu.js we write:
let Menu = {};
Menu.specialty = "Roasted Beet Burger with Mint Sauce";

module.exports = Menu; 

The pattern we use to export modules is thus:

Create an object to represent the module.
Add properties or methods to the module object.
Export the module with module.exports.
---> require()
In Node.js, use the require() function to import modules.

const Airplane = require('./1-airplane.js');
const displayAirplane= ()=>{
  console.log(Airplane.myAirplane);
}
displayAirplane();

module.exports II
We can also wrap any collection of data and functions in an object, and export the object using module.exports. In menu.js, we could write:

module.exports = {
  specialty: "Roasted Beet Burger with Mint Sauce",
  getSpecialty: function() {
    return this.specialty;
  } 
}; 
Then in order.js, we write:
const Menu = require('./menu.js');

console.log(Menu.getSpecialty());

--->export default
We’ll begin with the first syntax, default export.
let Menu = {};
export default Menu;


--->import
ES6 module syntax also introduces the import keyword for importing
 objects.
import Menu from './menu';

Named Exports
ES6 introduced a second common approach to export modules. In 
addition to export default, named exports allow us to export 
data through the use of variables

let specialty = '';
function isVegetarian() {
}; 
function isLowSodium() {
}; 

export { specialty, isVegetarian };

--->Named Imports
import { specialty, isVegetarian } from './menu';

console.log(specialty)

--->Export Named Exports
Named exports are also distinct in that they can be exported as so
on as they are declared, by placing the keyword export in front of
 variable declarations.
export let specialty = '';
export function isVegetarian() {
}; 
function isLowSodium() {
};

--->Import Named Imports
import { specialty, isVegetarian } from 'menu';

--->Export as
Named exports also conveniently offer a way to change the name of
variables when we export or import them. We can do this with the 
as keyword.
let specialty = '';
let isVegetarian = function() {
}; 
let isLowSodium = function() {
}; 

export { specialty as chefsSpecial, isVegetarian as isVeg,
 isLowSodium };

--->Import as
To import named export aliases with the as keyword, we add the 
aliased variable in our import statement.
import { chefsSpecial, isVeg } from './menu';

Another way of using aliases is to import the entire module as an
 alias:
import * as Carte from './menu';

Carte.chefsSpecial;
Carte.isVeg();
Carte.isLowSodium(); 


--->Combining Export Statements
We can also use named exports and default exports together
export { specialty as chefsSpecial, isVegetarian as isVeg };
export default isGlutenFree;

--->Combining Import Statements
We can import the collection of objects and functions with the 
same data.
We can use an import keyword to import both types of variables as 
such:
import { specialty, isVegetarian, isLowSodium } from './menu';

import GlutenFree from './menu';

--->Review
We just learned how to use JavaScript modules. Let’s review what we learned:

Modules in Node.js are reusable pieces of code that can be exported from one program and imported for use in another program.

module.exports exports the module for use in another program.
require() imports the module for use in the current program.
ES6 introduced a more flexible, easier syntax to export modules:

default exports use export default to export JavaScript objects, functions, and primitive data types.
named exports use the export keyword to export data in variables.
named exports can be aliased with the as keyword.
import is a keyword that imports any object, function, or data type.